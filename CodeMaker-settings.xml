<application>
  <component name="CodeMakerSettings">
    <option name="codeTemplates">
      <map>
        <entry key="Converter.vm">
          <value>
            <CodeTemplate>
              <option name="classNameVm" value="${class0.className}Converter" />
              <option name="classNumber" value="2" />
              <option name="codeTemplate" value="########################################################################################&#10;##&#10;## Common variables:&#10;##  $YEAR - yyyy&#10;##  $TIME - yyyy-MM-dd HH:mm:ss&#10;##  $USER - user.name&#10;##&#10;## Available variables:&#10;##  $class0 - the context class, alias: $class&#10;##  $class1 - the selected class, like $class1, $class2&#10;##  $ClassName - generate by the config of &quot;Class Name&quot;, the generated class name&#10;##&#10;## Class Entry Structure:&#10;##  $class0.className - the class Name&#10;##  $class0.packageName - the packageName&#10;##  $class0.importList - the list of imported classes name&#10;##  $class0.fields - the list of the class fields&#10;##          - type: the field type&#10;##          - name: the field name&#10;##          - modifier: the field modifier, like &quot;private&quot;,or &quot;@Setter private&quot; if include annotations&#10;##  $class0.allFields - the list of the class fields include all fields of superclass&#10;##          - type: the field type&#10;##          - name: the field name&#10;##          - modifier: the field modifier, like &quot;private&quot;,or &quot;@Setter private&quot; if include annotations&#10;##  $class0.methods - the list of class methods&#10;##          - name: the method name&#10;##          - modifier: the method modifier, like &quot;private static&quot;&#10;##          - returnType: the method returnType&#10;##          - params: the method params, like &quot;(String name)&quot;&#10;##  $class0.allMethods - the list of class methods include all methods of superclass&#10;##          - name: the method name&#10;##          - modifier: the method modifier, like &quot;private static&quot;&#10;##          - returnType: the method returnType&#10;##          - params: the method params, like &quot;(String name)&quot;#&#10;########################################################################################&#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end&#10;#macro (low $strIn)$strIn.valueOf($strIn.charAt(0)).toLowerCase()$strIn.substring(1)#end&#10;#set($class0Var = &quot;#low(${class0.ClassName})&quot;)&#10;#set($class1Var = &quot;#low(${class1.ClassName})&quot;)&#10;package $class0.PackageName;&#10;&#10;#foreach($importer in $class0.ImportList)&#10;import $importer;&#10;#end&#10;&#10;/**&#10; *&#10; * @author $USER&#10; * @version $Id: ${ClassName}.java, v 0.1 $TIME $USER Exp $$&#10; */&#10;class $ClassName {&#10;&#10;    /**&#10;     * Convert ${class1.ClassName} to ${class0.ClassName}&#10;     * @param ${class1Var}&#10;     * @return&#10;     */&#10;    public static $class0.ClassName convertTo${class0.ClassName}($class1.ClassName #low($class1.ClassName)) {&#10;        if (${class1Var} == null) {&#10;            return null;&#10;        }&#10;        $class0.ClassName ${class0Var} = new ${class0.ClassName}();&#10;&#10;#foreach($field in $class0.Fields)&#10;#if( $field.modifier.equals(&quot;private&quot;))&#10;        ${class0Var}.set#cap($field.Name)(${class1Var}.get#cap($field.Name)());&#10;#end&#10;#end&#10;&#10;        return ${class0Var};&#10;    }&#10;&#10;    /**&#10;     * Convert ${class0.ClassName} to ${class1.ClassName}&#10;     * @param ${class0Var}&#10;     * @return&#10;     */&#10;    public static $class1.ClassName convertTo${class1.ClassName}($class0.ClassName #low($class0.ClassName)) {&#10;        if (${class0Var} == null) {&#10;            return null;&#10;        }&#10;        $class1.ClassName ${class1Var} = new ${class1.ClassName}();&#10;&#10;#foreach($field in $class1.Fields)&#10;#if( $field.modifier.equals(&quot;private&quot;))&#10;        ${class1Var}.set#cap($field.Name)(${class0Var}.get#cap($field.Name)());&#10;#end&#10;#end&#10;&#10;        return ${class1Var};&#10;    }&#10;}&#10;" />
              <option name="fileEncoding" value="UTF-8" />
              <option name="name" value="Converter.vm" />
            </CodeTemplate>
          </value>
        </entry>
        <entry key="Model.vm">
          <value>
            <CodeTemplate>
              <option name="classNameVm" value="#set($end = ${class0.className.length()} - 2)${class0.className.substring(0,${end})}" />
              <option name="classNumber" value="1" />
              <option name="codeTemplate" value="########################################################################################&#10;##&#10;## Common variables:&#10;##  $YEAR - yyyy&#10;##  $TIME - yyyy-MM-dd HH:mm:ss&#10;##  $USER - user.name&#10;##&#10;## Available variables:&#10;##  $class0 - the context class, alias: $class&#10;##  $class1 - the selected class, like $class1, $class2&#10;##  $ClassName - generate by the config of &quot;Class Name&quot;, the generated class name&#10;##&#10;## Class Entry Structure:&#10;##  $class0.className - the class Name&#10;##  $class0.packageName - the packageName&#10;##  $class0.importList - the list of imported classes name&#10;##  $class0.fields - the list of the class fields&#10;##          - type: the field type&#10;##          - name: the field name&#10;##          - modifier: the field modifier, like &quot;private&quot;,or &quot;@Setter private&quot; if include annotations&#10;##  $class0.allFields - the list of the class fields include all fields of superclass&#10;##          - type: the field type&#10;##          - name: the field name&#10;##          - modifier: the field modifier, like &quot;private&quot;,or &quot;@Setter private&quot; if include annotations&#10;##  $class0.methods - the list of class methods&#10;##          - name: the method name&#10;##          - modifier: the method modifier, like &quot;private static&quot;&#10;##          - returnType: the method returnType&#10;##          - params: the method params, like &quot;(String name)&quot;&#10;##  $class0.allMethods - the list of class methods include all methods of superclass&#10;##          - name: the method name&#10;##          - modifier: the method modifier, like &quot;private static&quot;&#10;##          - returnType: the method returnType&#10;##          - params: the method params, like &quot;(String name)&quot;#&#10;########################################################################################&#10;package $class0.PackageName;&#10;&#10;#foreach($importer in $class0.ImportList)&#10;import $importer;&#10;#end&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;&#10;/**&#10; *&#10; * @author $USER&#10; * @version $Id: ${ClassName}.java, v 0.1 $TIME $USER Exp $$&#10; */&#10;class $ClassName {&#10;&#10;#foreach($field in $class0.Fields)&#10;    /**&#10;     *&#10;     */&#10;    @Getter&#10;    @Setter&#10;    private $field.Type $field.Name;&#10;&#10;#end&#10;&#10;}&#10;" />
              <option name="fileEncoding" value="UTF-8" />
              <option name="name" value="Model.vm" />
            </CodeTemplate>
          </value>
        </entry>
        <entry key="specs2-matcher.vm">
          <value>
            <CodeTemplate>
              <option name="classNameVm" value="${class0.className}Matchers" />
              <option name="classNumber" value="1" />
              <option name="codeTemplate" value="#######################################################################################&#10;##&#10;## Common variables:&#10;##  $YEAR - yyyy&#10;##  $TIME - yyyy-MM-dd HH:mm:ss&#10;##  $USER - user.name&#10;##&#10;## Available variables:&#10;##  $class0 - the context class, alias: $class&#10;##  $class1 - the selected class, like $class1, $class2&#10;##  $ClassName - generated by the config of &quot;Class Name&quot;, the generated class name&#10;##&#10;## Class Entry Structure:&#10;##  $class0.className - the class Name&#10;##  $class0.packageName - the packageName&#10;##  $class0.importList - the list of imported classes name&#10;##  $class0.fields - the list of the class fields&#10;##          - type: the field type&#10;##          - name: the field name&#10;##          - modifier: the field modifier, like &quot;private&quot;,or &quot;@Setter private&quot; if include annotations&#10;##  $class0.allFields - the list of the class fields include all fields of superclass&#10;##          - type: the field type&#10;##          - name: the field name&#10;##          - modifier: the field modifier, like &quot;private&quot;,or &quot;@Setter private&quot; if include annotations&#10;##  $class0.methods - the list of class methods&#10;##          - name: the method name&#10;##          - modifier: the method modifier, like &quot;private static&quot;&#10;##          - returnType: the method returnType&#10;##          - params: the method params, like &quot;(String name)&quot;&#10;##  $class0.allMethods - the list of class methods include all methods of superclass&#10;##          - name: the method name&#10;##          - modifier: the method modifier, like &quot;private static&quot;&#10;##          - returnType: the method returnType&#10;##          - params: the method params, like &quot;(String name)&quot;#&#10;########################################################################################&#10;package $class.PackageName&#10;#foreach($importer in $class.ImportList)&#10;    #if($importer)&#10;    import $importer&#10;    #end&#10;#end&#10;import org.specs2.matcher.{AlwaysMatcher, Matcher, Matchers}&#10;&#10;#set($typeParams = $utils.mkString($class.typeParams, ', ' , '[', ']'))&#10;&#10;trait ${class.className}Matchers extends Matchers {&#10;def a${class.className}With$typeParams(&#10;#**##foreach($field in $class.Fields)&#10;    ${field.Name}: Matcher[${field.Type}] = AlwaysMatcher()#if($velocityCount &lt; $class0.Fields.size()),&#10;    #**##end&#10;#end&#10;): Matcher[${class0.className}$typeParams] = {&#10;#foreach($field in $class0.Fields)&#10;    ${field.Name} ^^ ((_:${class0.className}$typeParams).${field.Name} aka &quot;${class0.className}.${field.Name}&quot;)#if($velocityCount &lt; $class0.Fields.size()) and&#10;#**##end&#10;#end&#10;}&#10;}&#10;&#10;object ${class.className}Matchers extends ${class.className}Matchers&#10;" />
              <option name="fileEncoding" value="UTF-8" />
              <option name="name" value="specs2-matcher.vm" />
            </CodeTemplate>
          </value>
        </entry>
      </map>
    </option>
  </component>
</application>