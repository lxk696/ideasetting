<application>
  <component name="AppStorage">
    <histories>
      <item value="Consider any of the following:" />
      <item value="Correct the classpath of your application so that it contains a single, compatible version of javax.validation.BootstrapConfiguration" />
      <item value="The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary" />
      <item value="m Count Down Latch" />
      <item value="set" />
      <item value="ReflectionUtil.getCallerClass will be much slower due to this. java.lang.ClassNotFoundException: sun.reflect.Reflection" />
      <item value="transitive" />
      <item value="transitive dependencies (if any) will not be available, enable debug logging for more details" />
      <item value="mutex" />
      <item value="representing" />
      <item value="Time unit representing one second" />
      <item value="micros" />
      <item value="reserve" />
      <item value="Burst" />
      <item value="time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited" />
      <item value="Smooth Warming Up" />
      <item value="/ Eagerly load the ContextClosedEvent class to avoid weird classloader issues // on application shutdown in WebLogic 8.1. (Reported by Dustin Woods.)" />
      <item value="Tell the subclass to refresh the internal bean factory." />
      <item value="Last step: publish corresponding event." />
      <item value="Instantiate all remaining (non-lazy-init) singletons." />
      <item value="localization" />
      <item value="persistence" />
      <item value="cancelling" />
      <item value="Consider defining a bean named 'entityManagerFactory' in your configuration." />
      <item value="Module directive expected" />
      <item value="indicates abnormal termination." />
      <item value="Termination status. By convention, a nonzero status code * indicates abnormal termination. *" />
      <item value="Synchronize on the class object, causing any other thread * that attempts to initiate shutdown to stall indefinitely" />
      <item value="Halt immediately on nonzero status" />
      <item value="transient" />
      <item value="Withdraw" />
      <item value="Verify" />
      <item value="Execution" />
      <item value="in the supplied" />
      <item value="embedded" />
      <item value="associated" />
      <item value="locates" />
      <item value="Implementations are free to turn the metadata in the custom tag into as many * {@link BeanDefinition BeanDefinitions} as required." />
      <item value="Definition" />
      <item value="Callback that receives refresh events from this servlet's WebApplicationContext. * &lt;p&gt;The default implementation calls {@link #onRefresh}, * triggering a refresh of this servlet's context-dependent state. * @param event the incoming ApplicationContext event" />
      <item value="Initialize the strategy objects that this servlet uses. * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects." />
      <item value="Check registered HandlerExceptionResolvers..." />
      <item value="Determine an error ModelAndView via the registered HandlerExceptionResolvers." />
      <item value="Subclasses must implement this method to do the work of request handling, * receiving a centralized callback for GET, POST, PUT and DELETE. * &lt;p&gt;The contract is essentially the same as that for the commonly overridden * {@code doGet} or {@code doPost} methods of HttpServlet. * &lt;p&gt;This class intercepts calls to ensure that exception handling and * event publication takes place." />
      <item value="Exposes the DispatcherServlet-specific request attributes and delegates to {@link #doDispatch}for the actual dispatching." />
      <item value="Concurrent handling started during a forward" />
      <item value="Handle the result of handler selection and handler invocation, which is * either a ModelAndView or an Exception to be resolved to a ModelAndView" />
      <item value="Did the handler return a view to render" />
      <item value="As of 4.3, we're processing Errors thrown from handler methods as well, // making them available for @ExceptionHandler methods and other scenarios." />
      <item value="invoke the handler" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="91" />
        <entry key="ENGLISH" value="92" />
        <entry key="DANISH" value="1" />
        <entry key="FRENCH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>